// <auto-generated />
using System;
using HomeAPI.Data.ApplicationDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HomeAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.6");

            modelBuilder.Entity("HomeAPI.Data.Entities.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("PreferredReps")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PreferredSets")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PreferredWeight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("HomeAPI.Data.Entities.Workout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("ActualDay")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualReps")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualSets")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualWeight")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Duration")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ExerciseId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("WorkoutProgramId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("WorkoutProgramId");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("HomeAPI.Data.Entities.WorkoutDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Day")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("WorkoutProgramId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutProgramId");

                    b.ToTable("WorkoutDays");
                });

            modelBuilder.Entity("HomeAPI.Data.Entities.WorkoutDayExercise", b =>
                {
                    b.Property<Guid>("WorkoutDayId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("TEXT");

                    b.HasKey("WorkoutDayId", "ExerciseId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("WorkoutDayExercise");
                });

            modelBuilder.Entity("HomeAPI.Data.Entities.WorkoutFocus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WorkoutFocuses");
                });

            modelBuilder.Entity("HomeAPI.Data.Entities.WorkoutProgram", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WorkoutPrograms");
                });

            modelBuilder.Entity("HomeAPI.Data.Entities.WorkoutProgramFocus", b =>
                {
                    b.Property<Guid>("WorkoutProgramId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("WorkoutFocusId")
                        .HasColumnType("TEXT");

                    b.HasKey("WorkoutProgramId", "WorkoutFocusId");

                    b.HasIndex("WorkoutFocusId");

                    b.ToTable("WorkoutProgramFocus");
                });

            modelBuilder.Entity("HomeAPI.Data.Entities.Workout", b =>
                {
                    b.HasOne("HomeAPI.Data.Entities.Exercise", "Exercise")
                        .WithMany()
                        .HasForeignKey("ExerciseId");

                    b.HasOne("HomeAPI.Data.Entities.WorkoutProgram", "WorkoutProgram")
                        .WithMany()
                        .HasForeignKey("WorkoutProgramId");

                    b.Navigation("Exercise");

                    b.Navigation("WorkoutProgram");
                });

            modelBuilder.Entity("HomeAPI.Data.Entities.WorkoutDay", b =>
                {
                    b.HasOne("HomeAPI.Data.Entities.WorkoutProgram", "WorkoutProgram")
                        .WithMany("WorkoutDays")
                        .HasForeignKey("WorkoutProgramId");

                    b.Navigation("WorkoutProgram");
                });

            modelBuilder.Entity("HomeAPI.Data.Entities.WorkoutDayExercise", b =>
                {
                    b.HasOne("HomeAPI.Data.Entities.Exercise", "Exercise")
                        .WithMany("WorkoutDayExercises")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeAPI.Data.Entities.WorkoutDay", "WorkoutDay")
                        .WithMany("WorkoutDayExercises")
                        .HasForeignKey("WorkoutDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("WorkoutDay");
                });

            modelBuilder.Entity("HomeAPI.Data.Entities.WorkoutProgramFocus", b =>
                {
                    b.HasOne("HomeAPI.Data.Entities.WorkoutFocus", "WorkoutFocus")
                        .WithMany("WorkoutProgramFocuses")
                        .HasForeignKey("WorkoutFocusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeAPI.Data.Entities.WorkoutProgram", "WorkoutProgram")
                        .WithMany("WorkoutProgramFocuses")
                        .HasForeignKey("WorkoutProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkoutFocus");

                    b.Navigation("WorkoutProgram");
                });

            modelBuilder.Entity("HomeAPI.Data.Entities.Exercise", b =>
                {
                    b.Navigation("WorkoutDayExercises");
                });

            modelBuilder.Entity("HomeAPI.Data.Entities.WorkoutDay", b =>
                {
                    b.Navigation("WorkoutDayExercises");
                });

            modelBuilder.Entity("HomeAPI.Data.Entities.WorkoutFocus", b =>
                {
                    b.Navigation("WorkoutProgramFocuses");
                });

            modelBuilder.Entity("HomeAPI.Data.Entities.WorkoutProgram", b =>
                {
                    b.Navigation("WorkoutDays");

                    b.Navigation("WorkoutProgramFocuses");
                });
#pragma warning restore 612, 618
        }
    }
}
